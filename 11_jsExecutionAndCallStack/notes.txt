How code executes in JavaScript?
_____________________________________

|| # Execution Context - How js run the programmes ?!



|| # JS is a single threaded


There are three types of contexts in the JavaScript: 
* {} -> GLOBAL EXECUTION CONTEXT: which can be refers by using 'this' keyword ~ Browser me window object aajaati h
* FUNCTION/AL EXECUTION CONTEXT
* EVAL EXECUTION CONTEXT


JS CODE RUNS IN TWO PHASES:
   1. Memory Creation Phase or Creation Phase
   2. Execution Phase


Now consider the following code

==================================
1	let val1 = 17
2	let val2 = 2
3	function addNum(num1, num2){
4	    let total = num1 + num2
5	    return total
6	}
7	let result1 = addNum(val1, val2)
8	let result2 = addNum(10, 2)
==================================

Steps of code execution: 

1. Global Execution or Global Environment which is first which is allocated by this keyword jo ki hona hi hona h

2. Creation Phase: (First Cycle)
	val1 -> undefined
	val2 -> undefined
	addNum -> definition
	result1 -> undefined
	result2 -> undefined

3. Execution Phase: (Second Cycle)
	val1 <- 17
	val2 <- 2
	line #7: addNum() -> [new variable environment, execution thread] (EXECUTION CONTEXT)
			    => Memory Phase: val1 -> undefined
					     val2 -> undefined		
					     total -> undefined
			    => Execution Context: num1 <- val1 = 17
						  num2 <- val2 = 2
						  total <- 17 + 2 = 19		which returns to the global execution context

		           AFTER EXECUTION DONE, THIS EXECUTION CONTEXT DELETED

	line #8: result2 -> [new variable environment, execution thread] (EXECUTION CONTEXT)
			    => Memory Phase: val1 -> undefined
					     val2 -> undefined		
					     total -> undefined
			    => Execution Context: num1 <- 10
						  num2 <- 2
						  total <- 10 + 2 = 12		which returns to the global execution context

		           AFTER EXECUTION DONE, THIS EXECUTION CONTEXT DELETED


CALLSTACK ~ Works on LIFO concept, where last execution-context executes first!

	

